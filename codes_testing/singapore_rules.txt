//map_name = "san_francisco";
map_name = "san_francisco";

car_model = "gt_sensors";
car_color = green;
//ego_init_position = ENU (553090.0522572036, 4182687.8);
ego_init_position = "lane_8"->5;
ego_init_state = (ego_init_position);



ego_target_position = "lane_40"->30;

//ego_target_position = "lane_39"->200;
//ego_target_position = "lane_39"->200;
//ego_target_position = (552898.9957, 4182687.8989561526);
//ego_target_position = ego_init_position-(200, 0);
//ego_target_position = IMU (200, 0);
//ego_target_position = ego_target_position_c;
ego_target_state = (ego_target_position);
vehicle_type = (car_model, car_color);
ego_vehicle = AV(ego_init_state, ego_target_state, vehicle_type);

heading1 = 10 deg related to ego_vehicle;
npc_init_state = ("lane_8"->20, , 6.0);
npc1_type = "Sedan";
npc_state1 = (("lane_45"->2, ,6), ("lane_35"->1, ,3),("lane_55"->1, ,6), ("lane_43"->30, ,25));
npc1_destination = ("lane_43"->150);
npc1 = Vehicle(npc_init_state, Waypoint(npc_state1), npc1_destination, (npc1_type));

heading2 = 50 deg related to npc1;
npc_init_state2 = ("lane_8"->10.0, ,3.0);
npc_state2 = (("lane_780"->1.0, ,10.0), ("lane_782"->10.0, , 4.0), ("lane_76"->0.0, , 4.0), ("lane_40"->20.0, ,5.0));
npc_target_state2 = ("lane_40"->100.0);
npc2_type = "SUV";
npc2 =Vehicle(npc_init_state2, Waypoint(npc_state2), npc_target_state2, (npc2_type));


npc_init_state3 = ("lane_9"->10.0, , 5.0);
npc_target_state3 = ("lane_40"->90.0);
npc3 = Vehicle(npc_init_state3,,npc_target_state3);

npc_init_state4 = ("lane_47"->30.0, ,3.0);
npc_state4 = (("lane_788"->1.0, ,10.0));
npc_target_state4 = ("lane_7"->30.0);
npc4 =Vehicle(npc_init_state4, Waypoint(npc_state4), npc_target_state4);


npc_init_state5 = ("lane_785"->30.0, ,2.0);
npc_state5 = (("lane_44"->1.0, ,10.0));
npc_target_state5 = ("lane_768"->30.0);
npc5 =Vehicle(npc_init_state5, Waypoint(npc_state5), npc_target_state5);


npc = {npc1, npc2, npc3, npc4, npc5};

time = 12:00;
weather = {rain:0.5, snow: 0.1, wetness: heavy};

evn = Environment(time, weather);

ped_position = (553020.54, 4182693.69);
ped_heading = 90 deg related to "lane_38"->30;
ped_init_state= (ped_position, ped_heading, 1.0);
ped_state_list = (((553020.54,4182693.69), ped_heading, 1.0),((553023.26, 4182671.82), ped_heading, 1.0));
//ped_state_list = (("lane_759"->7, , 1.0), ("lane_759"->15, , 1.0));
ped_motion = Waypoint(ped_state_list);
ped = Pedestrian(ped_init_state, ped_motion);


scenario0 = CreateScenario{load(map_name);
			        ego_vehicle;
			        npc; // no other vehicles;
			        {ped}; // no pedestrians;
			        {}; // no obstacles;
			        evn; // default environment
};


Trace trace = EXE(scenario0);


// law2
law2_sub1 = (direction == left) -> (F[-10,0] (turnSignal == left));
law2_sub2 = (direction == right -> (F[-10,0] (turnSignal == right)));
law2_sub3 = (speed < 30 & brake < 30 -> (F[-5,0] (warningFlashOn | turnSignal == left | turnSignal == right)));
law2_sub4 = (speed >= 30 & brake >= 30 -> (F[-5,0] (warningFlashOn | turnSignal == left | turnSignal == right)));
law2 = G ((law2_sub1 | law2_sub2) & (law2_sub3 | law2_sub4));

//law6
law6 = G (direction == forward & NPCAhead.speed > 0.3 -> (F[0,10] (speed > 0.3)));


//law7
law7 =  G ( junctionAhead(1) & (direction == left | direction == right) -> direction == currentLane.direction);

//law38
//Green Light
law38_sub1_1 = (trafficLightAhead.color == green) & (stoplineAhead(2) | junctionAhead(2)) & ~PriorityNPCAhead & ~PriorityPedsAhead;
law38_sub1_2 = F[0,2](speed > 0.3);
law38_sub1 = G (law38_sub1_1 -> law38_sub1_2);

//Amber Light
//law38_sub2_1 = ((trafficLightAhead.color == yellow) & (stoplineAhead(0) | currentLane.number .+ 1 == 0)) -> (F[0,10] (speed > 0.2));
law38_sub2_1 = ((trafficLightAhead.color == yellow) & (stoplineAhead(0) | currentLane.number == 0)) -> (F[0,2] (speed > 0.3));
law38_sub2_2 = ((trafficLightAhead.color == yellow) & stoplineAhead(3.5) & ~stoplineAhead(0) & currentLane.number > 0) -> (F[0,3] (speed < 0.3));
law38_sub2 = G (law38_sub2_1 & law38_sub2_2);

//Red Light
law38_sub3_1 = ((trafficLightAhead.color == red) & (stoplineAhead(0) | junctionAhead(0) & ~(direction == right)) -> (F[0,3] (speed < 0.3));
law38_sub3_2 = ((trafficLightAhead.color == red) & (stoplineAhead(0) | junctionAhead(0) & direction == right & ~PriorityNPCAhead & ~PriorityPedsAhead) -> (F[0,2] (speed > 0.3));
law38_sub3 = G (law38_sub3_1 & law38_sub3_2);
law38 = law38_sub1 & law38_sub2 & law38_sub3;

trace |= law2 & law6 & law7 & law38;
